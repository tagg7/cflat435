// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  NATO
// DateTime: 17/09/2012 17:00:51
// UserName: Nigel Horspool
// Input file <CbParser.y - 17/09/2012 17:00:40>

// options: conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace FrontEnd
{
public enum Tokens {error=126,
    EOF=127,OROR=128,ANDAND=129,EQEQ=130,NOTEQ=131,GTEQ=132,
    LTEQ=133,UMINUS=134,Kwd_break=135,Kwd_class=136,Kwd_const=137,Kwd_else=138,
    Kwd_if=139,Kwd_new=140,Kwd_out=141,Kwd_public=142,Kwd_return=143,Kwd_static=144,
    Kwd_struct=145,Kwd_using=146,Kwd_void=147,Kwd_while=148,Kwd_Length=149,PLUSPLUS=150,
    MINUSMINUS=151,Ident=152,Number=153,StringConst=154};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public int yylval;
  public LexLocation yylloc;
  public ScanObj( int t, int val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[76];
  private static State[] states = new State[160];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "UsingList", "DeclList", "ConstDecl", "StructDecl", 
      "MethodDecl", "Type", "InitVal", "FieldDeclList", "FieldDecl", "IdentList", 
      "OptFormals", "Block", "FormalPars", "FormalDecl", "Statement", "Designator", 
      "Expr", "OptActuals", "OptElsePart", "ActPars", "DeclsAndStmts", "LocalDecl", 
      "Qualifiers", };

  static Parser() {
    states[0] = new State(new int[]{146,156,136,-3},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{136,4});
    states[4] = new State(new int[]{152,5});
    states[5] = new State(new int[]{123,6});
    states[6] = new State(-8,new int[]{-4,7});
    states[7] = new State(new int[]{125,8,142,12},new int[]{-5,9,-6,10,-7,11});
    states[8] = new State(-2);
    states[9] = new State(-5);
    states[10] = new State(-6);
    states[11] = new State(-7);
    states[12] = new State(new int[]{137,13,145,24,144,37});
    states[13] = new State(new int[]{152,21},new int[]{-8,14});
    states[14] = new State(new int[]{152,15});
    states[15] = new State(new int[]{61,16});
    states[16] = new State(new int[]{153,19,154,20},new int[]{-9,17});
    states[17] = new State(new int[]{59,18});
    states[18] = new State(-9);
    states[19] = new State(-10);
    states[20] = new State(-11);
    states[21] = new State(new int[]{91,22,152,-24});
    states[22] = new State(new int[]{93,23});
    states[23] = new State(-25);
    states[24] = new State(new int[]{152,25});
    states[25] = new State(new int[]{123,26});
    states[26] = new State(-14,new int[]{-10,27});
    states[27] = new State(new int[]{125,28,142,30},new int[]{-11,29});
    states[28] = new State(-12);
    states[29] = new State(-13);
    states[30] = new State(new int[]{152,21},new int[]{-8,31});
    states[31] = new State(new int[]{152,36},new int[]{-12,32});
    states[32] = new State(new int[]{59,33,44,34});
    states[33] = new State(-15);
    states[34] = new State(new int[]{152,35});
    states[35] = new State(-16);
    states[36] = new State(-17);
    states[37] = new State(new int[]{147,38});
    states[38] = new State(new int[]{152,39});
    states[39] = new State(new int[]{40,40});
    states[40] = new State(new int[]{152,21,41,-19},new int[]{-13,41,-15,150,-16,155,-8,153});
    states[41] = new State(new int[]{41,42});
    states[42] = new State(new int[]{123,44},new int[]{-14,43});
    states[43] = new State(-18);
    states[44] = new State(-47,new int[]{-23,45});
    states[45] = new State(new int[]{125,46,152,122,139,129,148,137,135,142,143,144,123,44,59,149},new int[]{-17,47,-24,48,-18,49,-14,148});
    states[46] = new State(-44);
    states[47] = new State(-48);
    states[48] = new State(-49);
    states[49] = new State(new int[]{61,50,40,110,150,118,151,120});
    states[50] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,51,-18,81});
    states[51] = new State(new int[]{59,52,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[52] = new State(-26);
    states[53] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,54,-18,81});
    states[54] = new State(new int[]{128,-50,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-50,44,-50,41,-50,93,-50});
    states[55] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,56,-18,81});
    states[56] = new State(new int[]{128,-51,129,-51,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-51,44,-51,41,-51,93,-51});
    states[57] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,58,-18,81});
    states[58] = new State(new int[]{128,-52,129,-52,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-52,44,-52,41,-52,93,-52});
    states[59] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,60,-18,81});
    states[60] = new State(new int[]{128,-53,129,-53,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-53,44,-53,41,-53,93,-53});
    states[61] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,62,-18,81});
    states[62] = new State(new int[]{128,-54,129,-54,130,-54,131,-54,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-54,44,-54,41,-54,93,-54});
    states[63] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,64,-18,81});
    states[64] = new State(new int[]{128,-55,129,-55,130,-55,131,-55,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-55,44,-55,41,-55,93,-55});
    states[65] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,66,-18,81});
    states[66] = new State(new int[]{128,-56,129,-56,130,-56,131,-56,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-56,44,-56,41,-56,93,-56});
    states[67] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,68,-18,81});
    states[68] = new State(new int[]{128,-57,129,-57,130,-57,131,-57,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,59,-57,44,-57,41,-57,93,-57});
    states[69] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,70,-18,81});
    states[70] = new State(new int[]{128,-58,129,-58,130,-58,131,-58,133,-58,60,-58,132,-58,62,-58,43,-58,45,-58,42,73,47,75,37,77,59,-58,44,-58,41,-58,93,-58});
    states[71] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,72,-18,81});
    states[72] = new State(new int[]{128,-59,129,-59,130,-59,131,-59,133,-59,60,-59,132,-59,62,-59,43,-59,45,-59,42,73,47,75,37,77,59,-59,44,-59,41,-59,93,-59});
    states[73] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,74,-18,81});
    states[74] = new State(-60);
    states[75] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,76,-18,81});
    states[76] = new State(-61);
    states[77] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,78,-18,81});
    states[78] = new State(-62);
    states[79] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,80,-18,81});
    states[80] = new State(-63);
    states[81] = new State(new int[]{40,82,59,-64,128,-64,129,-64,130,-64,131,-64,133,-64,60,-64,132,-64,62,-64,43,-64,45,-64,42,-64,47,-64,37,-64,44,-64,41,-64,93,-64});
    states[82] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106,41,-38},new int[]{-20,83,-22,85,-19,109,-18,81});
    states[83] = new State(new int[]{41,84});
    states[84] = new State(-65);
    states[85] = new State(new int[]{44,86,41,-39});
    states[86] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,87,-18,81});
    states[87] = new State(new int[]{128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,44,-40,41,-40});
    states[88] = new State(new int[]{46,90,91,93,40,-75,59,-75,128,-75,129,-75,130,-75,131,-75,133,-75,60,-75,132,-75,62,-75,43,-75,45,-75,42,-75,47,-75,37,-75,44,-75,41,-75,93,-75,61,-75,150,-75,151,-75},new int[]{-25,89});
    states[89] = new State(-72);
    states[90] = new State(new int[]{152,91});
    states[91] = new State(new int[]{46,90,91,93,40,-75,59,-75,128,-75,129,-75,130,-75,131,-75,133,-75,60,-75,132,-75,62,-75,43,-75,45,-75,42,-75,47,-75,37,-75,44,-75,41,-75,93,-75,61,-75,150,-75,151,-75},new int[]{-25,92});
    states[92] = new State(-73);
    states[93] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,94,-18,81});
    states[94] = new State(new int[]{93,95,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[95] = new State(new int[]{46,90,91,93,40,-75,59,-75,128,-75,129,-75,130,-75,131,-75,133,-75,60,-75,132,-75,62,-75,43,-75,45,-75,42,-75,47,-75,37,-75,44,-75,41,-75,93,-75,61,-75,150,-75,151,-75},new int[]{-25,96});
    states[96] = new State(-74);
    states[97] = new State(-66);
    states[98] = new State(new int[]{46,99,59,-67,128,-67,129,-67,130,-67,131,-67,133,-67,60,-67,132,-67,62,-67,43,-67,45,-67,42,-67,47,-67,37,-67,44,-67,41,-67,93,-67});
    states[99] = new State(new int[]{152,100});
    states[100] = new State(-68);
    states[101] = new State(new int[]{152,102});
    states[102] = new State(new int[]{91,103,59,-69,128,-69,129,-69,130,-69,131,-69,133,-69,60,-69,132,-69,62,-69,43,-69,45,-69,42,-69,47,-69,37,-69,44,-69,41,-69,93,-69});
    states[103] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,104,-18,81});
    states[104] = new State(new int[]{93,105,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[105] = new State(-70);
    states[106] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,107,-18,81});
    states[107] = new State(new int[]{41,108,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[108] = new State(-71);
    states[109] = new State(new int[]{128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77,44,-41,41,-41});
    states[110] = new State(new int[]{141,114,45,79,152,88,153,97,154,98,140,101,40,106,41,-38},new int[]{-20,111,-22,85,-19,109,-18,81});
    states[111] = new State(new int[]{41,112});
    states[112] = new State(new int[]{59,113});
    states[113] = new State(-27);
    states[114] = new State(new int[]{152,88},new int[]{-18,115});
    states[115] = new State(new int[]{41,116});
    states[116] = new State(new int[]{59,117});
    states[117] = new State(-35);
    states[118] = new State(new int[]{59,119});
    states[119] = new State(-28);
    states[120] = new State(new int[]{59,121});
    states[121] = new State(-29);
    states[122] = new State(new int[]{91,125,46,90,152,36,61,-75,40,-75,150,-75,151,-75},new int[]{-25,89,-12,123});
    states[123] = new State(new int[]{59,124,44,34});
    states[124] = new State(-45);
    states[125] = new State(new int[]{93,126,45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,94,-18,81});
    states[126] = new State(new int[]{152,36},new int[]{-12,127});
    states[127] = new State(new int[]{59,128,44,34});
    states[128] = new State(-46);
    states[129] = new State(new int[]{40,130});
    states[130] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,131,-18,81});
    states[131] = new State(new int[]{41,132,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[132] = new State(new int[]{152,88,139,129,148,137,135,142,143,144,123,44,59,149},new int[]{-17,133,-18,49,-14,148});
    states[133] = new State(new int[]{138,135,125,-43,152,-43,139,-43,148,-43,135,-43,143,-43,123,-43,59,-43},new int[]{-21,134});
    states[134] = new State(-30);
    states[135] = new State(new int[]{152,88,139,129,148,137,135,142,143,144,123,44,59,149},new int[]{-17,136,-18,49,-14,148});
    states[136] = new State(-42);
    states[137] = new State(new int[]{40,138});
    states[138] = new State(new int[]{45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,139,-18,81});
    states[139] = new State(new int[]{41,140,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[140] = new State(new int[]{152,88,139,129,148,137,135,142,143,144,123,44,59,149},new int[]{-17,141,-18,49,-14,148});
    states[141] = new State(-31);
    states[142] = new State(new int[]{59,143});
    states[143] = new State(-32);
    states[144] = new State(new int[]{59,145,45,79,152,88,153,97,154,98,140,101,40,106},new int[]{-19,146,-18,81});
    states[145] = new State(-33);
    states[146] = new State(new int[]{59,147,128,53,129,55,130,57,131,59,133,61,60,63,132,65,62,67,43,69,45,71,42,73,47,75,37,77});
    states[147] = new State(-34);
    states[148] = new State(-36);
    states[149] = new State(-37);
    states[150] = new State(new int[]{44,151,41,-20});
    states[151] = new State(new int[]{152,21},new int[]{-16,152,-8,153});
    states[152] = new State(-22);
    states[153] = new State(new int[]{152,154});
    states[154] = new State(-23);
    states[155] = new State(-21);
    states[156] = new State(new int[]{152,157});
    states[157] = new State(new int[]{59,158});
    states[158] = new State(new int[]{146,156,136,-3},new int[]{-3,159});
    states[159] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{-3,136,152,123,-4,125});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{146,152,59,-3});
    rules[5] = new Rule(-4, new int[]{-4,-5});
    rules[6] = new Rule(-4, new int[]{-4,-6});
    rules[7] = new Rule(-4, new int[]{-4,-7});
    rules[8] = new Rule(-4, new int[]{});
    rules[9] = new Rule(-5, new int[]{142,137,-8,152,61,-9,59});
    rules[10] = new Rule(-9, new int[]{153});
    rules[11] = new Rule(-9, new int[]{154});
    rules[12] = new Rule(-6, new int[]{142,145,152,123,-10,125});
    rules[13] = new Rule(-10, new int[]{-10,-11});
    rules[14] = new Rule(-10, new int[]{});
    rules[15] = new Rule(-11, new int[]{142,-8,-12,59});
    rules[16] = new Rule(-12, new int[]{-12,44,152});
    rules[17] = new Rule(-12, new int[]{152});
    rules[18] = new Rule(-7, new int[]{142,144,147,152,40,-13,41,-14});
    rules[19] = new Rule(-13, new int[]{});
    rules[20] = new Rule(-13, new int[]{-15});
    rules[21] = new Rule(-15, new int[]{-16});
    rules[22] = new Rule(-15, new int[]{-15,44,-16});
    rules[23] = new Rule(-16, new int[]{-8,152});
    rules[24] = new Rule(-8, new int[]{152});
    rules[25] = new Rule(-8, new int[]{152,91,93});
    rules[26] = new Rule(-17, new int[]{-18,61,-19,59});
    rules[27] = new Rule(-17, new int[]{-18,40,-20,41,59});
    rules[28] = new Rule(-17, new int[]{-18,150,59});
    rules[29] = new Rule(-17, new int[]{-18,151,59});
    rules[30] = new Rule(-17, new int[]{139,40,-19,41,-17,-21});
    rules[31] = new Rule(-17, new int[]{148,40,-19,41,-17});
    rules[32] = new Rule(-17, new int[]{135,59});
    rules[33] = new Rule(-17, new int[]{143,59});
    rules[34] = new Rule(-17, new int[]{143,-19,59});
    rules[35] = new Rule(-17, new int[]{-18,40,141,-18,41,59});
    rules[36] = new Rule(-17, new int[]{-14});
    rules[37] = new Rule(-17, new int[]{59});
    rules[38] = new Rule(-20, new int[]{});
    rules[39] = new Rule(-20, new int[]{-22});
    rules[40] = new Rule(-22, new int[]{-22,44,-19});
    rules[41] = new Rule(-22, new int[]{-19});
    rules[42] = new Rule(-21, new int[]{138,-17});
    rules[43] = new Rule(-21, new int[]{});
    rules[44] = new Rule(-14, new int[]{123,-23,125});
    rules[45] = new Rule(-24, new int[]{152,-12,59});
    rules[46] = new Rule(-24, new int[]{152,91,93,-12,59});
    rules[47] = new Rule(-23, new int[]{});
    rules[48] = new Rule(-23, new int[]{-23,-17});
    rules[49] = new Rule(-23, new int[]{-23,-24});
    rules[50] = new Rule(-19, new int[]{-19,128,-19});
    rules[51] = new Rule(-19, new int[]{-19,129,-19});
    rules[52] = new Rule(-19, new int[]{-19,130,-19});
    rules[53] = new Rule(-19, new int[]{-19,131,-19});
    rules[54] = new Rule(-19, new int[]{-19,133,-19});
    rules[55] = new Rule(-19, new int[]{-19,60,-19});
    rules[56] = new Rule(-19, new int[]{-19,132,-19});
    rules[57] = new Rule(-19, new int[]{-19,62,-19});
    rules[58] = new Rule(-19, new int[]{-19,43,-19});
    rules[59] = new Rule(-19, new int[]{-19,45,-19});
    rules[60] = new Rule(-19, new int[]{-19,42,-19});
    rules[61] = new Rule(-19, new int[]{-19,47,-19});
    rules[62] = new Rule(-19, new int[]{-19,37,-19});
    rules[63] = new Rule(-19, new int[]{45,-19});
    rules[64] = new Rule(-19, new int[]{-18});
    rules[65] = new Rule(-19, new int[]{-18,40,-20,41});
    rules[66] = new Rule(-19, new int[]{153});
    rules[67] = new Rule(-19, new int[]{154});
    rules[68] = new Rule(-19, new int[]{154,46,152});
    rules[69] = new Rule(-19, new int[]{140,152});
    rules[70] = new Rule(-19, new int[]{140,152,91,-19,93});
    rules[71] = new Rule(-19, new int[]{40,-19,41});
    rules[72] = new Rule(-18, new int[]{152,-25});
    rules[73] = new Rule(-25, new int[]{46,152,-25});
    rules[74] = new Rule(-25, new int[]{91,-19,93,-25});
    rules[75] = new Rule(-25, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 155 "CbParser.y"

#line 156 "CbParser.y"

#line 157 "CbParser.y"

#line 158 "CbParser.y"

}
}
